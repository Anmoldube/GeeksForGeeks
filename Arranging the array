//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            int a[] = new int[n];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(inputLine[i]);
            }
            
            Solution obj = new Solution();
            obj.Rearrange(a, n);
            
            StringBuilder output = new StringBuilder();
            for(int i=0;i<n;i++)
                output.append(a[i]+" ");
            System.out.println(output);
            
        }
	}
}


// } Driver Code Ends


class Solution {
    
    public void Rearrange(int a[], int n)
    {
        // Your code goes here
        RearrangePosNeg(a, 0, n - 1); 
    }
    // Function to Rearrange positive and negative 
    // numbers in a array 
    public void RearrangePosNeg(int arr[], int l, int r)
    { 
        if (l < r) { 
            // Same as (l+r)/2, but avoids overflow for 
            // large l and h 
            int m = l + (r - l) / 2; 
      
            // Sort first and second halves 
            RearrangePosNeg(arr, l, m); 
            RearrangePosNeg(arr, m + 1, r); 
      
            merge(arr, l, m, r); 
        } 
    }
    public void merge(int arr[], int l, int m, int r) 
    { 
        int i = l; // Initial index of 1st subarray 
        int j = m + 1; // Initial index of IInd 
      
        while (i <= m && arr[i] < 0) 
            i++; 
        while (j <= r && arr[j] < 0) 
            j++; 
        reverse(arr, i, m); 
        reverse(arr, m + 1, j - 1); 
        reverse(arr, i, j - 1); 
    }
    public void reverse(int arr[], int l, int r) 
    { 
        if (l < r) { 
            int temp=arr[l];
            arr[l]=arr[r];
            arr[r]=temp;
            reverse(arr, ++l, --r); 
        } 
    }
}
